// <auto-generated />
using System;
using GoodsAPI.DAL.DBInfrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GoodsAPI.DAL.Migrations
{
    [DbContext(typeof(GoodsContext))]
    [Migration("20180829203346_Init_Migrate")]
    partial class Init_Migrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GoodsAPI.DAL.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BillId");

                    b.Property<string>("Name");

                    b.Property<decimal>("Sum");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("GoodsAPI.DAL.Models.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Sum");

                    b.HasKey("Id");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("GoodsAPI.DAL.Models.Good", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BoughtDate");

                    b.Property<float>("Count");

                    b.Property<int?>("GoodImportanceId");

                    b.Property<int?>("GoodTypeId");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GoodImportanceId");

                    b.HasIndex("GoodTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("GoodsAPI.DAL.Models.GoodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("GoodTypes");
                });

            modelBuilder.Entity("GoodsAPI.DAL.Models.Importance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Importances");
                });

            modelBuilder.Entity("GoodsAPI.DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<int?>("UserBillId");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasFilter("[Login] IS NOT NULL");

                    b.HasIndex("UserBillId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GoodsAPI.DAL.Models.UserGoodType", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<int>("GoodTypeID");

                    b.Property<int>("Id");

                    b.HasKey("UserID", "GoodTypeID");

                    b.HasIndex("GoodTypeID");

                    b.ToTable("UserGoodType");
                });

            modelBuilder.Entity("GoodsAPI.DAL.Models.UserImportance", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<int>("ImportanceID");

                    b.HasKey("UserID", "ImportanceID");

                    b.HasIndex("ImportanceID");

                    b.ToTable("UserImportance");
                });

            modelBuilder.Entity("GoodsAPI.DAL.Models.Account", b =>
                {
                    b.HasOne("GoodsAPI.DAL.Models.Bill")
                        .WithMany("Accounts")
                        .HasForeignKey("BillId");
                });

            modelBuilder.Entity("GoodsAPI.DAL.Models.Good", b =>
                {
                    b.HasOne("GoodsAPI.DAL.Models.Importance", "GoodImportance")
                        .WithMany()
                        .HasForeignKey("GoodImportanceId");

                    b.HasOne("GoodsAPI.DAL.Models.GoodType", "GoodType")
                        .WithMany()
                        .HasForeignKey("GoodTypeId");

                    b.HasOne("GoodsAPI.DAL.Models.User")
                        .WithMany("AllGoods")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GoodsAPI.DAL.Models.User", b =>
                {
                    b.HasOne("GoodsAPI.DAL.Models.Bill", "UserBill")
                        .WithMany()
                        .HasForeignKey("UserBillId");
                });

            modelBuilder.Entity("GoodsAPI.DAL.Models.UserGoodType", b =>
                {
                    b.HasOne("GoodsAPI.DAL.Models.GoodType", "GoodType")
                        .WithMany("UserGoodTypes")
                        .HasForeignKey("GoodTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoodsAPI.DAL.Models.User", "User")
                        .WithMany("UserGoodTypes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoodsAPI.DAL.Models.UserImportance", b =>
                {
                    b.HasOne("GoodsAPI.DAL.Models.Importance", "Importance")
                        .WithMany("UserImportances")
                        .HasForeignKey("ImportanceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoodsAPI.DAL.Models.User", "User")
                        .WithMany("UserImportances")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
